<meta id="libshopgate">
<script type="text/javascript">
  document.observe("dom:loaded", function () {
    const commands = [{
      'c': "sendPipelineRequest",
      'p': {
        'serial': '4711',
        'name': 'createNewCartForCustomer',
        'input': {'orderId': <?php echo $this->getOrderId(); ?>}
      }
    }];

    if ('dispatchCommandsForVersion' in SGJavascriptBridge) {
      SGJavascriptBridge.dispatchCommandsForVersion(commands, '12.0');
    } else {
      SGJavascriptBridge.dispatchCommandsStringForVersion(JSON.stringify(commands), '12.0');
    }

  });

  AppCommands = {
    closeInAppBrowser: function(redirectUrl) {

      var redirectTo = '/';
      if (redirectUrl) {
        redirectTo = redirectUrl;
      }

      const commands = [
        {
          'c': 'broadcastEvent',
          'p': {
            'event': 'closeInAppBrowser',
            'data' : {'redirectTo':redirectTo}
          }
        }
      ];

      if ('dispatchCommandsForVersion' in SGJavascriptBridge) {
        SGJavascriptBridge.dispatchCommandsForVersion(commands, '12.0');
      } else {
        SGJavascriptBridge.dispatchCommandsStringForVersion(JSON.stringify(commands), '12.0');
      }
    }
  }

  /**
   * Is fired to tell the app, that the checkout-process was successful
   * @param err
   * @param serial
   * @param output
   */
  SGEvent.pipelineResponse = function (err, serial, output) {
    switch (serial) {
      case '4711' :
        const commands = [
          {
            "c": "broadcastEvent",
            "p": {
              "event": "checkoutSuccess",
              "data": <?php echo $this->getJsonOrderData() ?>
            }
          }
        ];

        if ('dispatchCommandsForVersion' in SGJavascriptBridge) {
          SGJavascriptBridge.dispatchCommandsForVersion(commands, '12.0');
        } else {
          SGJavascriptBridge.dispatchCommandsStringForVersion(JSON.stringify(commands), '12.0');
        }

        break;
    }
  }

  document.addEventListener('DOMContentLoaded', exchangeContinueShoppingButton);

  function exchangeContinueShoppingButton() {
    if (<?php echo $this->isShopgateCheckout() ? 'false' : 'true'; ?>) {
      if (document.getElementsByClassName('button')) {
        let targetButton = null;
        Array.from(document.getElementsByClassName("button")).forEach(function (button) {
          //shopBaseUrl is defined in shopgate/cloudapi/pipelineRequest.phtml
          if (button.getAttribute('onclick') === "window.location='<?php echo $this->getShopBaseUrl() ?>'") {
            targetButton = button;
          }
        });

        if (!targetButton) {
          console.log('ERROR: Button was not found');
          return;
        }

        if (targetButton.nodeName === 'BUTTON') {
          // Overwrite default behavior of the "Continue Shopping"-Button
          targetButton.onclick = (function () {
            AppCommands.closeInAppBrowser(); //This object is defined in the pipelineRequest.js
          })
        }
      }
    }
  }

</script>
